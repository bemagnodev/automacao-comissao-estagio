import pandas as pd
import streamlit as st

from elegibility_validator import validate_eligibility
from BOA_scraper import extract_academic_data_from_boa, validate_boa


def generate_report_card(academic_data, validations_dict):
    """
    Gera um card de relat√≥rio de elegibilidade no Streamlit.

    Args:
        student_name (str): O nome do estudante.
        validations_dict (dict): Dicion√°rio com os resultados booleanos das valida√ß√µes.
        academic_data (dict): Dicion√°rio com os dados acad√™micos do estudante.
    """
    
    # --- Container Principal para o Card ---
    with st.container(border=True):
        st.subheader(f"Resultado para {academic_data.get('nome_aluno', 'Aluno Desconhecido')}")
        st.markdown("---")

        # --- Status Final (APTO/INAPTO) ---
        if validations_dict.get("valid_student", False):
            st.success(f"‚úÖ PARAB√âNS! O(A) aluno(a) est√° APTO(A).")
        else:
            st.error(f"‚ùå ATEN√á√ÉO! O(A) aluno(a) est√° INAPTO(A).")
        
        st.write("") # Adiciona um espa√ßo

        # --- Painel de Desempenho R√°pido ---
        st.write("**Painel de Desempenho**")
        
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric(label="CR Acumulado", value=f'{academic_data.get("cr_acumulado", 0.0)}')
        with col2:
            st.metric(label="Per√≠odos Cursados", value=f'{academic_data.get("periodos_integralizados", 0)}')
        with col3:
            st.metric(label="Horas de Extens√£o", value=f'{academic_data.get("carga_horaria_extensao", 0)}h')
            
        st.write("") # Adiciona um espa√ßo

        # --- Expander para Detalhes dos Crit√©rios ---
        with st.expander("Ver an√°lise detalhada dos crit√©rios"):
            
            # Mapeamento de chaves para nomes amig√°veis e requisitos de exemplo

            academic_requirements = {
                                        "minimum_cr": 6.0,
                                        "max_periods": academic_data["prazo_maximo"],
                                        "minimum_ext_hours": 160.0,
                                        "minimum_credits": 87
                                    }

            criteria_map = {
                "valid_cr": {"name": "Coeficiente de Rendimento", "value": academic_data.get("cr_acumulado"), "required": academic_requirements["minimum_cr"]},
                "valid_periods": {"name": "Per√≠odos Cursados", "value": academic_data.get("periodos_integralizados"), "required": f'<= {academic_requirements["max_periods"]}'},
                "valid_ext_hours": {"name": "Horas de Extens√£o", "value": academic_data.get("carga_horaria_extensao"), "required": f">= {academic_requirements['minimum_ext_hours']}"},
                "valid_company": {"name": "Empresa Conveniada", "value": validations_dict.get("valid_company"), "required": "True"},
                "valid_courses": {"name": "Disciplinas Obrigat√≥rias", "value": validations_dict.get("valid_courses"), "required": "True"},
            }

            for key, validation_status in validations_dict.items():
                if key in criteria_map:
                    details = criteria_map[key]
                    icon = "‚úÖ" if validation_status else "‚ùå"
                    
                    st.markdown(
                        f"{icon} **{details['name']}:** (Seu: `{details['value']}` | Requisito: `{details['required']}`)"
                    )


def main():
    companies_df = pd.read_excel("data/affiliated_companies.xlsx")

    # --- Configura√ß√£o da P√°gina ---
    st.set_page_config(
        page_title="Upload de BOA e Sele√ß√£o",
        page_icon="üìÑ",
        layout="centered"
    )

    # --- T√≠tulo e Descri√ß√£o ---
    st.title("Automa√ß√£o da Comiss√£o de Est√°gio")
    with st.expander("‚ÑπÔ∏è Como funciona o sistema? (Clique para expandir)"):
        st.markdown("""
        Este sistema foi projetado para simplificar e acelerar a verifica√ß√£o de elegibilidade de est√°gios, seguindo um fluxo de trabalho claro e eficiente:
        
        - **1. Upload do BOA:** O processo come√ßa com o upload do **Boletim de Orienta√ß√£o Acad√™mica (BOA)**, o hist√≥rico escolar oficial do aluno. O sistema primeiro valida se o arquivo √© um BOA aut√™ntico.
        
        - **2. Sele√ß√£o da Empresa:** Em seguida, o usu√°rio seleciona a empresa conveniada onde o est√°gio ser√° realizado. Caso a empresa n√£o esteja na lista, √© poss√≠vel digitar o nome manualmente.
        
        - **3. Valida√ß√£o Autom√°tica:** Com um clique, o sistema l√™ o PDF, extrai todos os dados acad√™micos relevantes (CR, per√≠odos integralizados, horas de extens√£o, mat√©rias obrigat√≥rias, empresas conveniadas) e os compara com as regras de elegibilidade do est√°gio.
        
        - **4. Relat√≥rio Instant√¢neo:** Imediatamente ap√≥s a an√°lise, um relat√≥rio visual √© gerado, indicando se o aluno est√° **APTO** ou **INAPTO** e detalhando o resultado de cada crit√©rio individual.
        """)

    with st.expander("üéØ Pr√≥ximos Passos e Evolu√ß√£o do Processo"):
        st.markdown("""
        Para tornar a automa√ß√£o ainda mais completa, os pr√≥ximos passos envolvem a an√°lise de documentos adicionais do processo de est√°gio:
        
        - **1. Leitura de Documentos do Est√°gio:** Implementar o upload e a leitura automatizada de tr√™s novos documentos:
            - **Plano de Atividades do Estagi√°rio**
            - **Termo de Compromisso de Est√°gio (TCE)**
            - **C√≥pia da Ap√≥lice de Seguro de Acidentes Pessoais**
            
        - **2. Valida√ß√µes Cruzadas:** Utilizar os dados extra√≠dos desses novos documentos para realizar verifica√ß√µes essenciais:
            - **Carga Hor√°ria Semanal:** Confirmar se o plano de atividades especifica **20 horas semanais**.
            - **Prazo de In√≠cio:** Verificar se a data de in√≠cio do est√°gio no TCE respeita o prazo de **15 dias de anteced√™ncia** da data de submiss√£o.
            - **Preenchimento Autom√°tico:** Extrair o nome da empresa diretamente do TCE para preencher o campo de sele√ß√£o automaticamente.
        """)

    with st.expander("üöÄ Ideias de Melhorias Futuras"):
        st.markdown("""
        Al√©m dos pr√≥ximos passos, planejamos outras funcionalidades para aprimorar a ferramenta a longo prazo:
        
        - **üìÑ Gera√ß√£o de Relat√≥rio em PDF:** Adicionar um bot√£o para exportar o relat√≥rio de elegibilidade final para um arquivo PDF formatado, pronto para ser arquivado ou enviado.
        
        - **‚öôÔ∏è Banco de Dados de Empresas:** Integrar com um banco de dados real para gerenciar as empresas conveniadas, permitindo adicionar e editar informa√ß√µes diretamente pelo sistema.
        
        - **üìß Notifica√ß√µes por E-mail:** Implementar o envio de um e-mail autom√°tico para a comiss√£o de est√°gio ou para o aluno com o resultado da an√°lise.
        """)

    st.markdown("---")

    # --- Componentes da Interface ---

    # 1. Componente de Upload de Arquivo (PDF)
    st.header("1. Fa√ßa o upload do seu BOA em PDF")
    uploaded_file = st.file_uploader(
        "Escolha o arquivo PDF",
        type="pdf",
        help="Apenas arquivos no formato .pdf s√£o aceitos."
    )

    if uploaded_file:
        if validate_boa(uploaded_file):
            st.success(f"Arquivo {uploaded_file.name} foi validado e carregado com sucesso!")
        else:
            st.error("O arquivo carregado n√£o √© um BOA v√°lido. Por favor, verifique o arquivo e tente novamente.")

    # 2. Componente de Sele√ß√£o (Selectbox)
    st.header("2. Selecione a Empresa Conveniada")

    # Lista das empresas conveniadas
    empresas_conveniadas = companies_df["INSTITUI√á√ÉO"].tolist()

    # O widget selectbox retorna o nome que foi selecionado
    selected_company = st.selectbox(
        "Escolha uma empresa abaixo:",
        options=empresas_conveniadas,
        index=None,
        placeholder="Selecione uma das empresas conveniadas √† UFRJ",
        help="O nome selecionado ser√° associado ao documento enviado."
    )

    st.write("#### N√£o encontrou a empresa?")

    # 2. Crie o checkbox para ativar a entrada manual
    ativar_entrada_manual = st.checkbox("Digitar o nome de outra empresa")

    # 3. Vari√°vel para armazenar o nome final da empresa
    nome_empresa_final = ""

    # 4. L√≥gica condicional baseada no checkbox
    if ativar_entrada_manual:
        # Se o checkbox estiver MARCADO, mostre o campo de texto
        nome_digitado = st.text_input(
            "Digite o nome da nova empresa:",
            placeholder="Nome da empresa que n√£o est√° na lista"
        )
        # O nome final ser√° o que o usu√°rio digitar
        nome_empresa_final = nome_digitado.strip()
    else:
        # Se o checkbox estiver DESMARCADO, o nome final √© o do selectbox
        nome_empresa_final = selected_company

    st.markdown("---")

    # --- L√≥gica e Exibi√ß√£o dos Resultados ---
    if st.button("Processar Dados"):
        # Verifica se um arquivo foi carregado E se um nome foi selecionado
        if uploaded_file is not None and nome_empresa_final:            
            with st.spinner('Processando os dados... Por favor, aguarde.'):
                academic_data = extract_academic_data_from_boa(uploaded_file)
                # academic_data = {
                #                     "periodos_integralizados": 16,
                #                     "prazo_maximo": 14,
                #                     "carga_horaria_obtida": 120,
                #                     "creditos_obtidos": 120.0,
                #                     "cr_acumulado": 5.5,
                #                     "carga_horaria_extensao": 120,
                #                 }
                
                validations_dict = validate_eligibility(academic_data, companies_df, nome_empresa_final, uploaded_file)
                # st.write(validations_dict)
                generate_report_card(academic_data, validations_dict)
                if validations_dict["valid_student"]:
                    st.success("Todas as condi√ß√µes para a valida√ß√£o do est√°gio foram atendidas. O estudante est√° apto a realizar o est√°gio.")

        elif uploaded_file is None:
            st.error("Erro: Por favor, fa√ßa o upload de um arquivo PDF antes de processar.")
        else:
            st.warning("Algo deu errado. Verifique se todas as op√ß√µes foram preenchidas.")


if __name__ == "__main__":
    main()
